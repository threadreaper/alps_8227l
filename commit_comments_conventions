Troubleshooting any sort of an issue in the Android world can often have
one touching a lot of different files.   I am not very good at remembering
all the details of everything I touched between builds, so I have implemented
a system of making comments in a simple text file to keep track of what 
changes were made in the case that a regression is introduced with any
particular commit.   I know that I could simply 'git restore' but in cases 
where several files have been touched in the process of tracking down/fixing
a bug or implementing a feature, it's often helpful to be able to remember
what I was thinking when I made any specific change.   In most cases, I 
can adress a regression rather quickly by just retracing my steps and 
discovering the mistake, provided I can remember what I did.

I have decided to attempt to adhere to a simple outline of conventions for
these commit comment documents, which I find especially helpful in cases
where I'm returning to something a day (or even longer) later.  This is mostly
for my own use, but since the code is being made publicly available, I'm 
including this document to explain the conventions.

Comments about changes made are recorded in the commit_comments
file in the root of the repository, and follow a few simple guidelines:

    Any change to the code is noted on a new unindented line with a prefix
		label assigning what "type" of change it is intended to be.
	fixed: addressing a bug, an error message, or the spontaneous
	    combustion of the cpu on the test hardware
	added: feature implementation or some kind of new functionality
	    being introduced
    temp: indicates some sort of temporary workaround, or anything I
	    need to remember to look at again later.   any entry with the 
		"temp:" prefix mandates a corresponding entry in the TODO file,
		also located in the root of the repository
	A line "-----------" is inserted for every attempt to compile after a 
	    set of changes were made and a build was attempted.  This is
		why I do this here and not in the git message, because I may 
		go through several sets of changes and new builds before I 
		make a commit and push new code to the master.

If multiple files are touched as part of any singular change, they are 
noted on indented lines below the initial entry, so all code changes 
necessary to implement something, fix something, or temporarily work
around something, can be stepped through.   It's the wetware version of
a stack trace!

If you're making a pull request, don't feel obligated to document things
the same way I do.   I do this because my memory sucks and I like to 
document stuff.
		